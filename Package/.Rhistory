locations <- sf::st_as_sf(locations, coords = c("Longitude", "Latitude"), crs = 4326)
times <- unique(data$Date)
##### Colors palette
pal_idw <- switch(
as.character(gradient),
"FALSE" = {
leaflet::colorBin(palette = c(c("green3", "greenyellow", "yellow", "orange", "red", "darkred")),
domain = range(dplyr::pull(stats::na.omit(locations),aggr_fun)), bins = 6, na.color = NA)
},
"TRUE" = {
leaflet::colorNumeric(palette = c(c("green3", "greenyellow", "yellow", "orange", "red", "darkred")),
domain = range(dplyr::pull(stats::na.omit(locations),aggr_fun)), na.color = NA)
}
)
#################################################################
##### Case n.3: Dynamic map without areal filling (gridded) #####
#################################################################
map <- leaflet::leaflet(mappa) %>%
leaflet::addProviderTiles(tile) %>%
leaflet::addScaleBar(position = "bottomright", options = leaflet::scaleBarOptions(imperial = F)) %>%
leaflet::addMapPane("polygons", zIndex = 410) %>%
leaflet::addMapPane("circles", zIndex = 420) %>%
leaflet::addPolygons(color = "black",  weight = 1, smoothFactor = 0.5,opacity = 1.0, fillOpacity = 0,
highlightOptions = leaflet::highlightOptions(color = "white", weight = 2, bringToFront = F),
options = leaflet::pathOptions(pane = "polygons"),
group = ifelse(NUTS_filler != "LAU", paste("NUTS", code_extr(NUTS_filler)), "LAU"))
if(NUTS_intborder == "NUTS0") {
mappa_nuts0 <- dplyr::filter(sf::st_as_sf(NUTS), .data$LEVL_CODE == 0 & substr(.data$NUTS_ID,1,code_extr(NUTS_extborder)+2) %in% mappa$NUTS_ID)
map <- leaflet::addPolygons(map = map, data = mappa_nuts0, group = "NUTS 0", color = "black",  weight = 1,
smoothFactor = 0.5,opacity = 1.0, fillOpacity = 0,
highlightOptions = leaflet::highlightOptions(color = "white", weight = 2, bringToFront = T), popup = mappa_nuts3$NAME_LATN,
options = leaflet::pathOptions(pane = "polygons"))
} else if(NUTS_intborder == "NUTS1") {
mappa_nuts1 <- dplyr::filter(sf::st_as_sf(NUTS), .data$LEVL_CODE == 1 & substr(.data$NUTS_ID,1,code_extr(NUTS_extborder)+2) %in% mappa$NUTS_ID)
map <- leaflet::addPolygons(map = map, data = mappa_nuts1, group = "NUTS 1", color = "black",  weight = 1,
smoothFactor = 0.5,opacity = 1.0, fillOpacity = 0,
highlightOptions = leaflet::highlightOptions(color = "white", weight = 2, bringToFront = T), popup = mappa_nuts3$NAME_LATN,
options = leaflet::pathOptions(pane = "polygons"))
} else if(NUTS_intborder == "NUTS2") {
mappa_nuts2 <- dplyr::filter(sf::st_as_sf(NUTS), .data$LEVL_CODE == 2 & substr(.data$NUTS_ID,1,code_extr(NUTS_extborder)+2) %in% mappa$NUTS_ID)
map <- leaflet::addPolygons(map = map, data = mappa_nuts3, group = "NUTS 2", color = "black",  weight = 1,
smoothFactor = 0.5,opacity = 1.0, fillOpacity = 0,
highlightOptions = leaflet::highlightOptions(color = "white", weight = 2, bringToFront = T), popup = mappa_nuts3$NAME_LATN,
options = leaflet::pathOptions(pane = "polygons"))
} else if(NUTS_intborder == "NUTS3") {
mappa_nuts3 <- dplyr::filter(sf::st_as_sf(NUTS), .data$LEVL_CODE == 3 & substr(.data$NUTS_ID,1,code_extr(NUTS_extborder)+2) %in% mappa$NUTS_ID)
map <- leaflet::addPolygons(map = map, data = mappa_nuts3, group = "NUTS 3", color = "black",  weight = 1,
smoothFactor = 0.5,opacity = 1.0, fillOpacity = 0,
highlightOptions = leaflet::highlightOptions(color = "white", weight = 2, bringToFront = T), popup = mappa_nuts3$NAME_LATN,
options = leaflet::pathOptions(pane = "polygons"))
} else if(NUTS_intborder == "LAU") {
NUTS_LAU <- sf::st_join(x = sf::st_as_sf(LAU),
y = dplyr::filter(sf::st_as_sf(NUTS), .data$LEVL_CODE == code_extr(NUTS_extborder)),
largest = T)
mappa_lau <- dplyr::filter(sf::st_as_sf(NUTS_LAU), .data$LEVL_CODE == code_extr(NUTS_extborder) & .data$NUTS_ID %in% dplyr::pull(mappa, .data$NUTS_ID))
map <- leaflet::addPolygons(map = map, data = mappa_lau, group = "LAU", color = "black",  weight = .5,
smoothFactor = 0.5, opacity = 1.0, fillOpacity = 0,
highlightOptions = leaflet::highlightOptions(color = "white", weight = 2, bringToFront = T), popup = mappa_lau$LAU_NAME,
options = leaflet::pathOptions(pane = "polygons"))
}
if(verbose == T) {
cat(paste0("Map initialization ended at ", Sys.time(), "\n"))
cat(paste0("Computing IDW interpolation started at ", Sys.time(), "\n"))
}
i
i = 1
if(verbose == T) {
cat(paste0("Computing IDW interpolation for: ", times[i], ", ", i, " of ", length(times), "\n"))
}
locs <- locations %>% dplyr::filter(.data$Date == times[i])
if(is.null(nmax) & is.null(maxdist)) {
my_idw <- gstat::idw(formula = stats::as.formula(paste0(aggr_fun, " ~ 1")), locations = stats::na.omit(locs), newdata = griglia, idp = idp)
} else if(!is.null(nmax) & is.null(maxdist)) {
my_idw <- gstat::idw(formula = stats::as.formula(paste0(aggr_fun, " ~ 1")), locations = stats::na.omit(locs), newdata = griglia, idp = idp, nmax = nmax)
} else if(is.null(nmax) & !is.null(maxdist)) {
my_idw <- gstat::idw(formula = stats::as.formula(paste0(aggr_fun, " ~ 1")), locations = stats::na.omit(locs), newdata = griglia, idp = idp, maxdist = maxdist)
} else if(!is.null(nmax) & !is.null(maxdist)) {
my_idw <- gstat::idw(formula = stats::as.formula(paste0(aggr_fun, " ~ 1")), locations = stats::na.omit(locs), newdata = griglia, idp = idp, nmax = nmax, maxdist = maxdist)
}
colnames(my_idw)[1] <- aggr_fun
ind <- sf::st_intersects(griglia, mappa, sparse = T)
my_idw <- my_idw[as.logical(apply(as.matrix(ind), 1, sum)),]
raster <- data.frame(mean = dplyr::pull(my_idw, aggr_fun), sf::st_coordinates(my_idw))
raster <- raster::rasterFromXYZ(data.frame(raster[,2:3], raster[,1]))#, crs = sp::CRS("EPSG:4326"))
raster::crs(raster) <- 4326
locations
my_idw
raster
map
locs
locations
leaflet::addRasterImage(map = map, x = raster, colors = pal_idw, group = times[i]) %>%
leaflet::addCircleMarkers(
data = dplyr::filter(locations, .data$Date == times[i]),
label = ~AirQualityStationEoICode,
fillColor = "black", fillOpacity = 1, radius = 2, stroke = F,
labelOptions = leaflet::labelOptions(bringToFront = T),
options = leaflet::pathOptions(pane = "circles"),
group = times[i],
popup = paste("Air Quality Station EoI Code:", locations$AirQualityStationEoICode,
"<br>","Air Quality Station Name:", points$AirQualityStationName,
"<br>","Pollutants:", pollutant,
"<br>",paste0(aggr_fun, ": ", round(dplyr::pull(dplyr::filter(locations, .data$Date == times[i]), get(aggr_fun)), 2)))
)
###########################################################################
##### Case n.4: Dynamic map with user-defined areal filling (gridded) #####
###########################################################################
map <- leaflet::leaflet(mappa) %>%
leaflet::addProviderTiles(tile) %>%
leaflet::addScaleBar(position = "bottomright", options = leaflet::scaleBarOptions(imperial = F)) %>%
leaflet::addMapPane("raster", zIndex = 400) %>%
leaflet::addMapPane("polygons", zIndex = 410) %>%
leaflet::addMapPane("circles", zIndex = 420) %>%
leaflet::addPolygons(color = "black",  weight = 1.5, smoothFactor = 0.5,opacity = 1.0, fillOpacity = 0,
highlightOptions = leaflet::highlightOptions(color = "white", weight = 2, bringToFront = F),
options = leaflet::pathOptions(pane = "polygons"))
NUTS_filler
if(verbose == T) {
cat(paste0("Map initialization ended at ", Sys.time(), "\n"))
cat(paste0("Computing IDW interpolation started at ", Sys.time(), "\n"))
}
i
if(verbose == T) {
cat(paste0("Computing IDW interpolation for: ", times[i], ", ", i, " out of ", length(times), "\n"))
}
locs <- locations %>%
dplyr::filter(.data$Date == times[i])
if(is.null(nmax) & is.null(maxdist)) {
my_idw <- gstat::idw(formula = stats::as.formula(paste0(aggr_fun, " ~ 1")), locations = stats::na.omit(locs), newdata = griglia, idp = idp)
} else if(!is.null(nmax) & is.null(maxdist)) {
my_idw <- gstat::idw(formula = stats::as.formula(paste0(aggr_fun, " ~ 1")), locations = stats::na.omit(locs), newdata = griglia, idp = idp, nmax = nmax)
} else if(is.null(nmax) & !is.null(maxdist)) {
my_idw <- gstat::idw(formula = stats::as.formula(paste0(aggr_fun, " ~ 1")), locations = stats::na.omit(locs), newdata = griglia, idp = idp, maxdist = maxdist)
} else if(!is.null(nmax) & !is.null(maxdist)) {
my_idw <- gstat::idw(formula = stats::as.formula(paste0(aggr_fun, " ~ 1")), locations = stats::na.omit(locs), newdata = griglia, idp = idp, nmax = nmax, maxdist = maxdist)
}
colnames(my_idw)[1] <- aggr_fun
ind <- sf::st_intersects(griglia, mappa, sparse = T)
my_idw <- my_idw[as.logical(apply(as.matrix(ind), 1, sum)),]
NUTS_filler
vals <- my_idw %>%
dplyr::mutate(fill = NA)
ind <- sf::st_intersects(x = vals$geometry,
y = dplyr::filter(sf::st_as_sf(LAU), .data$ISO %in% unique(mappa$CNTR_CODE)),
sparse = T)
suppressWarnings(
vals[as.logical(apply(as.matrix(ind), 1, sum)), "fill"] <- dplyr::filter(sf::st_as_sf(LAU), .data$ISO %in% unique(mappa$CNTR_CODE))[unlist(ind), "LAU_NAME"]
)
vals <- sf::st_drop_geometry(vals) %>%
dplyr::group_by(.data$fill) %>%
dplyr::summarise(summ = mean(get(aggr_fun))) %>%
dplyr::ungroup() %>% dplyr::rename("LAU_NAME" = .data$fill)
vals <- dplyr::left_join(x = vals,
y = dplyr::select(dplyr::filter(sf::st_as_sf(LAU), .data$ISO %in% unique(mappa$CNTR_CODE)), "geometry", "LAU_NAME"),
by = "LAU_NAME") %>%
sf::st_as_sf(crs = 4326)
vals
leaflet::addPolygons(map = map, color = "black", weight = .5, smoothFactor = 0.5,opacity = 1.0, fillOpacity = 1,
fillColor = pal_idw(x = vals$summ), data = vals, highlightOptions = leaflet::highlightOptions(color = "white", weight = 2, bringToFront = T),
options = leaflet::pathOptions(pane = "polygons"), group = times[i], popup = paste0(NUTS_filler,": ",vals$LAU_NAME, "<br>", aggr_fun,": ", round(vals$summ,2))) %>%
leaflet::addCircleMarkers(
data = dplyr::filter(locations, .data$Date == times[i]),
label = ~AirQualityStationEoICode,
fillColor = "black", fillOpacity = 1, radius = 2, stroke = F,
labelOptions = leaflet::labelOptions(bringToFront = T),
options = leaflet::pathOptions(pane = "circles"),
group = times[i],
popup = paste("Air Quality Station EoI Code:", vals$LAU_NAME,
"<br>","Pollutant:", pollutant,
"<br>",paste0(aggr_fun, ": ", round(dplyr::pull(dplyr::filter(vals, .data$Date == times[i]), get(aggr_fun)), 2)))
)
leaflet::addPolygons(map = map, color = "black", weight = .5, smoothFactor = 0.5,opacity = 1.0, fillOpacity = 1,
fillColor = pal_idw(x = vals$summ), data = vals, highlightOptions = leaflet::highlightOptions(color = "white", weight = 2, bringToFront = T),
options = leaflet::pathOptions(pane = "polygons"), group = times[i], popup = paste0(NUTS_filler,": ",vals$LAU_NAME, "<br>", aggr_fun,": ", round(vals$summ,2)))
paste0(aggr_fun, ": ", round(dplyr::pull(vals, get(aggr_fun)), 2))
leaflet::addPolygons(map = map, color = "black", weight = .5, smoothFactor = 0.5,opacity = 1.0, fillOpacity = 1,
fillColor = pal_idw(x = vals$summ), data = vals, highlightOptions = leaflet::highlightOptions(color = "white", weight = 2, bringToFront = T),
options = leaflet::pathOptions(pane = "polygons"), group = times[i], popup = paste0(NUTS_filler,": ",vals$LAU_NAME, "<br>", aggr_fun,": ", round(vals$summ,2))) %>%
leaflet::addCircleMarkers(
data = dplyr::filter(locations, .data$Date == times[i]),
label = ~AirQualityStationEoICode,
fillColor = "black", fillOpacity = 1, radius = 2, stroke = F,
labelOptions = leaflet::labelOptions(bringToFront = T),
options = leaflet::pathOptions(pane = "circles"),
group = times[i],
popup = paste("Air Quality Station EoI Code:", vals$LAU_NAME,
"<br>","Pollutant:", pollutant,
"<br>",paste0(aggr_fun, ": ", round(dplyr::pull(vals, get(aggr_fun)), 2)))
)
aggr_fun
vals
round(dplyr::pull(vals$summ), 2)
leaflet::addPolygons(map = map, color = "black", weight = .5, smoothFactor = 0.5,opacity = 1.0, fillOpacity = 1,
fillColor = pal_idw(x = vals$summ), data = vals, highlightOptions = leaflet::highlightOptions(color = "white", weight = 2, bringToFront = T),
options = leaflet::pathOptions(pane = "polygons"), group = times[i], popup = paste0(NUTS_filler,": ",vals$LAU_NAME, "<br>", aggr_fun,": ", round(vals$summ,2))) %>%
leaflet::addCircleMarkers(
data = dplyr::filter(locations, .data$Date == times[i]),
label = ~AirQualityStationEoICode,
fillColor = "black", fillOpacity = 1, radius = 2, stroke = F,
labelOptions = leaflet::labelOptions(bringToFront = T),
options = leaflet::pathOptions(pane = "circles"),
group = times[i],
popup = paste("Air Quality Station EoI Code:", vals$LAU_NAME,
"<br>","Pollutant:", pollutant,
"<br>",paste0(aggr_fun, ": ", round(dplyr::pull(vals$summ), 2)))
)
leaflet::addPolygons(map = map, color = "black", weight = .5, smoothFactor = 0.5,opacity = 1.0, fillOpacity = 1,
fillColor = pal_idw(x = vals$summ), data = vals, highlightOptions = leaflet::highlightOptions(color = "white", weight = 2, bringToFront = T),
options = leaflet::pathOptions(pane = "polygons"), group = times[i], popup = paste0(NUTS_filler,": ",vals$LAU_NAME, "<br>", aggr_fun,": ", round(vals$summ,2))) %>%
leaflet::addCircleMarkers(
data = dplyr::filter(locations, .data$Date == times[i]),
label = ~AirQualityStationEoICode,
fillColor = "black", fillOpacity = 1, radius = 2, stroke = F,
labelOptions = leaflet::labelOptions(bringToFront = T),
options = leaflet::pathOptions(pane = "circles"),
group = times[i],
popup = paste("Air Quality Station EoI Code:", vals$LAU_NAME,
"<br>","Pollutant:", pollutant,
"<br>",paste0(aggr_fun, ": ", round(vals$summ, 2)))
)
pollutant
leaflet::addPolygons(map = map, color = "black", weight = .5, smoothFactor = 0.5,opacity = 1.0, fillOpacity = 1,
fillColor = pal_idw(x = vals$summ), data = vals, highlightOptions = leaflet::highlightOptions(color = "white", weight = 2, bringToFront = T),
options = leaflet::pathOptions(pane = "polygons"), group = times[i], popup = paste0(NUTS_filler,": ",vals$LAU_NAME, "<br>", aggr_fun,": ", round(vals$summ,2))) %>%
leaflet::addCircleMarkers(
data = dplyr::filter(locations, .data$Date == times[i]),
label = ~AirQualityStationEoICode,
fillColor = "black", fillOpacity = 1, radius = 2, stroke = F,
labelOptions = leaflet::labelOptions(bringToFront = T),
options = leaflet::pathOptions(pane = "circles"),
group = times[i],
popup = paste("Air Quality Station EoI Code:", vals$LAU_NAME,
"<br>","Pollutant:", pollutant,
"<br>",paste0(aggr_fun, ": ", round(vals$summ, 2)))
)
map <- leaflet::addPolygons(map = map, color = "black", weight = .5, smoothFactor = 0.5,opacity = 1.0, fillOpacity = 1,
fillColor = pal_idw(x = vals$summ), data = vals, highlightOptions = leaflet::highlightOptions(color = "white", weight = 2, bringToFront = T),
options = leaflet::pathOptions(pane = "polygons"), group = times[i], popup = paste0(NUTS_filler,": ",vals$LAU_NAME, "<br>", aggr_fun,": ", round(vals$summ,2))) %>%
leaflet::addCircleMarkers(
data = dplyr::filter(locations, .data$Date == times[i]),
label = ~AirQualityStationEoICode,
fillColor = "black", fillOpacity = 1, radius = 2, stroke = F,
labelOptions = leaflet::labelOptions(bringToFront = T),
options = leaflet::pathOptions(pane = "circles"),
group = times[i],
popup = paste("Air Quality Station EoI Code:", vals$LAU_NAME,
"<br>","Pollutant:", pollutant,
"<br>",paste0(aggr_fun, ": ", round(vals$summ, 2)))
)
map
leaflet::addPolygons(map = map, color = "black", weight = .5, smoothFactor = 0.5,opacity = 1.0, fillOpacity = 1,
fillColor = pal_idw(x = vals$summ), data = vals, highlightOptions = leaflet::highlightOptions(color = "white", weight = 2, bringToFront = T),
options = leaflet::pathOptions(pane = "polygons"), group = times[i], popup = paste0(NUTS_filler,": ",vals$LAU_NAME, "<br>", aggr_fun,": ", round(vals$summ,2)))
leaflet::addPolygons(map = map, color = "black", weight = .5, smoothFactor = 0.5,opacity = 1.0, fillOpacity = 1,
fillColor = pal_idw(x = vals$summ), data = vals, highlightOptions = leaflet::highlightOptions(color = "white", weight = 2, bringToFront = T),
options = leaflet::pathOptions(pane = "polygons"),
group = times[i],
popup = paste0(NUTS_filler,": ",vals$LAU_NAME,
"<br>","Pollutant:", pollutant,
"<br>", aggr_fun,": ", round(vals$summ,2)))
times
leaflet::addPolygons(map = map, color = "black", weight = .5, smoothFactor = 0.5,opacity = 1.0, fillOpacity = 1,
fillColor = pal_idw(x = vals$summ), data = vals, highlightOptions = leaflet::highlightOptions(color = "white", weight = 2, bringToFront = T),
options = leaflet::pathOptions(pane = "polygons"),
group = times[i],
popup = paste0(NUTS_filler,": ",vals$LAU_NAME,
"<br>","Date:", times[i],
"<br>","Pollutant:", pollutant,
"<br>", aggr_fun,": ", round(vals$summ,2)))
library(lubridate)
library(tidyverse)
library(sf)
source("~/GitHub/EEAaq_R/Package/R/EEAaq_get_data.R")
source("~/GitHub/EEAaq_R/Package/R/EEAaq_get_dataframe.R")
source("~/GitHub/EEAaq_R/Package/R/handle_dates.R")
source("~/GitHub/EEAaq_R/Package/R/code_extr.R")
source("~/GitHub/EEAaq_R/Package/R/EEAaq_get_stations.R")
source("~/GitHub/EEAaq_R/Package/R/get_stations.R")
source("~/GitHub/EEAaq_R/Package/R/EEAaq_time_aggregate.R")
source("~/GitHub/EEAaq_R/Package/R/EEAaq_get_data.R")
source("~/GitHub/EEAaq_R/Package/R/EEAaq_idw_map.R")
###################################
########## EEAaq_idw_map ##########
###################################
# Download NO2 measurement for the city (LAU) of Milano (Italy) from January 1st to December 31st, 2023
IDstations <- EEAaq_get_stations(byStation = FALSE, complete = FALSE)
IDstations <- IDstations %>%
dplyr::filter(NUTS3 == "Milano") %>%
dplyr::pull(AirQualityStationEoICode) %>%
unique()
data <- EEAaq_get_data(IDstations = IDstations, pollutants = "NO2",
from = "2023-01-01", to = "2023-03-31", verbose = TRUE)
# Monthly aggregation
t_aggr <- EEAaq_time_aggregate(data = data, frequency = "monthly",
aggr_fun = c("mean", "min", "max"))
distinct = TRUE
gradient = FALSE
idp = 2
nmax = NULL
maxdist = NULL
tile = "Esri.WorldGrayCanvas"
save = NULL
filepath = NULL
width = 1280
height = 720
res = 144
delay = 1
verbose = TRUE
EEAaq_idw_map(data = t_aggr, pollutant = pollutant, aggr_fun = aggr_fun,
distinct = distinct, gradient = gradient,
dynamic = FALSE,
NUTS_filler = "NUTS3", NUTS_extborder = "NUTS2", NUTS_intborder = "LAU")
EEAaq_idw_map(data = t_aggr, pollutant = "NO2", aggr_fun = "mean",
distinct = distinct, gradient = gradient,
dynamic = FALSE,
NUTS_filler = "NUTS3", NUTS_extborder = "NUTS2", NUTS_intborder = "LAU")
EEAaq_idw_map(data = t_aggr, pollutant = pollutant, aggr_fun = aggr_fun,
distinct = distinct, gradient = gradient,
dynamic = TRUE,
NUTS_filler = "LAU", NUTS_extborder = "NUTS2", NUTS_intborder = "LAU")
EEAaq_idw_map(data = t_aggr, pollutant = "NO2", aggr_fun = "mean",
distinct = distinct, gradient = gradient,
dynamic = TRUE,
NUTS_filler = "LAU", NUTS_extborder = "NUTS2", NUTS_intborder = "LAU")
IDstations <- EEAaq_get_stations(byStation = FALSE, complete = FALSE)
IDstations <- IDstations %>%
dplyr::filter(ISO %in% c("BE"),
AirPollutant %in% "PM10") %>%
dplyr::pull(AirQualityStationEoICode) %>%
unique()
data <- EEAaq_get_data(IDstations = IDstations, pollutants = "PM10",
from = "2021-12-01", to = "2021-12-31", verbose = TRUE)
NUTS_extborder = "NUTS2"
NUTS_intborder = "LAU"
source("~/GitHub/EEAaq_R/Package/R/EEAaq_map_stations.R")
EEAaq_map_stations(data = data,
NUTS_extborder = "NUTS2",
NUTS_intborder = "LAU",
color = TRUE, dynamic = FALSE)
EEAaq_map_stations(data = data,
NUTS_extborder = "NUTS2",
NUTS_intborder = "NUTS3",
color = TRUE, dynamic = TRUE)
library(lubridate)
library(tidyverse)
library(sf)
source("~/GitHub/EEAaq_R/Package/R/EEAaq_get_data.R")
source("~/GitHub/EEAaq_R/Package/R/EEAaq_get_dataframe.R")
source("~/GitHub/EEAaq_R/Package/R/handle_dates.R")
source("~/GitHub/EEAaq_R/Package/R/code_extr.R")
source("~/GitHub/EEAaq_R/Package/R/EEAaq_get_stations.R")
source("~/GitHub/EEAaq_R/Package/R/get_stations.R")
source("~/GitHub/EEAaq_R/Package/R/EEAaq_time_aggregate.R")
source("~/GitHub/EEAaq_R/Package/R/EEAaq_get_data.R")
source("~/GitHub/EEAaq_R/Package/R/EEAaq_idw_map.R")
source("~/GitHub/EEAaq_R/Package/R/EEAaq_map_stations.R")
IDstations <- EEAaq_get_stations(byStation = FALSE, complete = FALSE)
IDstations <- IDstations %>%
dplyr::filter(ISO %in% c("BE"),
AirPollutant %in% "PM10") %>%
dplyr::pull(AirQualityStationEoICode) %>%
unique()
data <- EEAaq_get_data(IDstations = IDstations, pollutants = "PM10",
from = "2021-12-01", to = "2021-12-31", verbose = TRUE)
EEAaq_map_stations(data = data,
NUTS_extborder = "NUTS2",
NUTS_intborder = "LAU",
color = TRUE, dynamic = FALSE)
# Download NO2 measurement for the city (LAU) of Milano (Italy) from January 1st to December 31st, 2023
IDstations <- EEAaq_get_stations(byStation = FALSE, complete = FALSE)
IDstations <- IDstations %>%
dplyr::filter(NUTS3 == "Milano") %>%
dplyr::pull(AirQualityStationEoICode) %>%
unique()
data <- EEAaq_get_data(IDstations = IDstations, pollutants = "NO2",
from = "2023-01-01", to = "2023-03-31", verbose = TRUE)
# Monthly aggregation
t_aggr <- EEAaq_time_aggregate(data = data, frequency = "monthly",
aggr_fun = c("mean", "min", "max"))
EEAaq_idw_map(data = t_aggr, pollutant = "NO2", aggr_fun = "mean",
distinct = TRUE, gradient = FALSE,
dynamic = FALSE,
NUTS_filler = "NUTS3", NUTS_extborder = "NUTS2", NUTS_intborder = "LAU")
EEAaq_idw_map(data = t_aggr, pollutant = "NO2", aggr_fun = "mean",
distinct = TRUE, gradient = FALSE,
dynamic = FALSE,
NUTS_filler = "NUTS3", NUTS_extborder = "NUTS2", NUTS_intborder = "LAU")
EEAaq_idw_map(data = t_aggr, pollutant = "NO2", aggr_fun = "mean",
distinct = TRUE, gradient = FALSE,
dynamic = FALSE,
NUTS_filler = "NUTS3", NUTS_extborder = "NUTS2",
# NUTS_intborder = "LAU"
)
EEAaq_idw_map(data = t_aggr, pollutant = "NO2", aggr_fun = "mean",
distinct = TRUE, gradient = FALSE,
dynamic = TRUE,
NUTS_filler = "LAU", NUTS_extborder = "NUTS2", NUTS_intborder = "LAU")
#Download a dataset with the function EEAaq_get_data, which generate an EEAaq_df object.
IDstations <- EEAaq_get_stations(byStation = TRUE, complete = FALSE)
library(lubridate)
library(tidyverse)
library(sf)
source("~/GitHub/EEAaq_R/Package/R/EEAaq_get_data.R")
source("~/GitHub/EEAaq_R/Package/R/EEAaq_get_dataframe.R")
source("~/GitHub/EEAaq_R/Package/R/handle_dates.R")
source("~/GitHub/EEAaq_R/Package/R/code_extr.R")
source("~/GitHub/EEAaq_R/Package/R/EEAaq_get_stations.R")
source("~/GitHub/EEAaq_R/Package/R/get_stations.R")
source("~/GitHub/EEAaq_R/Package/R/EEAaq_time_aggregate.R")
source("~/GitHub/EEAaq_R/Package/R/EEAaq_get_data.R")
source("~/GitHub/EEAaq_R/Package/R/EEAaq_idw_map.R")
source("~/GitHub/EEAaq_R/Package/R/EEAaq_map_stations.R")
#Download a dataset with the function EEAaq_get_data, which generate an EEAaq_df object.
IDstations <- EEAaq_get_stations(byStation = TRUE, complete = FALSE)
IDstations <- IDstations %>%
dplyr::filter(NUTS3 %in% c("Milano")) %>%
dplyr::pull(AirQualityStationEoICode) %>%
unique()
data <- EEAaq_get_data(IDstations = IDstations, pollutants = "PM10",
from = "2023-01-01", to = "2023-01-31", verbose = TRUE)
temp <- tempdir()
filepath <- paste0(temp, "/data.csv")
EEAaq_export(data = data, filepath = filepath, format = "csv", shape = TRUE)
source("~/GitHub/EEAaq_R/Package/R/EEAaq_export.R")
EEAaq_export(data = data, filepath = filepath, format = "csv", shape = TRUE)
data
filepath
format
format = "csv"
shape = TRUE
`%>%` <- dplyr::`%>%`
"%notin%" <- Negate("%in%")
#Verifica connessione a internet
if(!curl::has_internet()) {
stop("Please check your internet connection. If the problem persists, please
contact the package maintainer.")
}
LAU <- EEAaq_get_dataframe(dataframe = "LAU")
NUTS <- EEAaq_get_dataframe(dataframe = "NUTS")
#Se l'oggetto non e' di classe EEAaq_df errore
stopifnot("The given object for the parameter data is not an 'EEAaq_df' class object" =
"EEAaq_df" %in% class(data) | "EEAaq_df_sfc" %in% class(data))
#Se non deve essere salvato lo shape, viene salvato solo il data.frame
if(format == "csv") {
utils::write.csv(x = data, file = filepath, row.names = F)
} else if(format == "txt") {
utils::write.table(x = data, file = filepath, row.names = F)
}
readr::write_csv(x = data, file = "yoyo.txt")
#Se l'oggetto non e' di classe EEAaq_df errore
stopifnot("The given object for the parameter data is not an 'EEAaq_df' class object" =
"EEAaq_df" %in% class(data) | "EEAaq_df_sfc" %in% class(data))
# Se non deve essere salvato lo shape, viene salvato solo il data.frame
if (format %in% c("csv","txt")) {
readr::write_csv(x = data, file = filepath)
}
getwd()
shape
data
str(data)
source("~/GitHub/EEAaq_R/Package/R/EEAaq_export.R")
EEAaq_export(data = data, filepath = filepath, format = "csv")
View(NUTS)
### Export data to csv file
temp <- tempdir()
filepath <- paste0(temp, "/data.csv")
EEAaq_export(data = data, filepath = filepath, format = "csv")
source("~/GitHub/EEAaq_R/Package/R/EEAaq_import.R")
### Import the EEAaq_df object saved in the previous code line
EEAaq_import(file_data = filepath)
EEAaq_summary(data)
source("~/GitHub/EEAaq_R/Package/R/EEAaq_summary.R")
EEAaq_summary(data)
# Weekly aggregation
t_aggr <- EEAaq_time_aggregate(data = data, frequency = "weekly",
aggr_fun = c("mean", "sd"))
View(t_aggr)
gc()
library(lubridate)
library(tidyverse)
library(sf)
source("~/GitHub/EEAaq_R/Package/R/EEAaq_get_data.R")
source("~/GitHub/EEAaq_R/Package/R/EEAaq_get_dataframe.R")
source("~/GitHub/EEAaq_R/Package/R/handle_dates.R")
source("~/GitHub/EEAaq_R/Package/R/code_extr.R")
source("~/GitHub/EEAaq_R/Package/R/EEAaq_get_stations.R")
source("~/GitHub/EEAaq_R/Package/R/get_stations.R")
source("~/GitHub/EEAaq_R/Package/R/EEAaq_time_aggregate.R")
source("~/GitHub/EEAaq_R/Package/R/EEAaq_get_data.R")
source("~/GitHub/EEAaq_R/Package/R/EEAaq_idw_map.R")
source("~/GitHub/EEAaq_R/Package/R/EEAaq_map_stations.R")
source("~/GitHub/EEAaq_R/Package/R/EEAaq_export.R")
source("~/GitHub/EEAaq_R/Package/R/EEAaq_import.R")
source("~/GitHub/EEAaq_R/Package/R/EEAaq_summary.R")
# Prova 0
pollutants = c("PM10","NO2","O3")
from = "2022-01-01"
to = "2022-01-31"
verbose = TRUE
IDstations <- EEAaq_get_stations(byStation = TRUE, complete = FALSE)
IDstations <- IDstations %>%
dplyr::filter(NUTS3 %in% c("Milano"),
ISO %in% c("IT")) %>%
dplyr::pull(AirQualityStationEoICode) %>%
unique()
prova0 <- EEAaq_get_data(IDstations = IDstations, pollutants = pollutants, from = from, to = to, verbose = verbose)
View(prova0)
gc()
LAU <- EEAaq_get_dataframe(dataframe= "LAU")
source("~/GitHub/EEAaq_R/Package/R/EEAaq_get_dataframe.R")
source("~/GitHub/EEAaq_R/Package/R/EEAaq_get_dataframe.R")
LAU <- EEAaq_get_dataframe(dataframe= "LAU")
